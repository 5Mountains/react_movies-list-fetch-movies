{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","data/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","request","a","fetch","response","data","json","Error","getMovie","FindMovie","addMovie","useState","newMovie","setNewMovie","isError","setIsError","query","setQuery","toFindMovie","undefined","newFilm","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","classNames","value","onChange","e","target","onClick","App","setMovies","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c3bc4b6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({\n  title,\n  description,\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MoviesList.scss';\n\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const URL = 'https://www.omdbapi.com/?apikey=';\nconst KEY = 'edc9ca3c';\n\nconst request = async(title) => {\n  try {\n    const response = await fetch(`${URL}${KEY}${title}`);\n    const data = response.json();\n\n    return data;\n  } catch (error) {\n    throw new Error('Whoops!');\n  }\n};\n\nexport const getMovie = async(title) => {\n  const data = await request(`&t=${title}`);\n\n  return data;\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../data/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [newMovie, setNewMovie] = useState(null);\n  const [isError, setIsError] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const onSearchField = (e) => {\n    setQuery(e.target.value);\n    setIsError(false);\n  };\n\n  const toFindMovie = async() => {\n    const newFilm = await getMovie(query);\n\n    if (newFilm.Error !== undefined) {\n      setIsError(true);\n      setQuery('');\n\n      return;\n    }\n\n    setIsError(false);\n\n    const movie = {\n      title: newFilm.Title,\n      description: newFilm.Plot,\n      imgUrl: newFilm.Poster,\n      imdbUrl: `https://www.imdb.com/title/${newFilm.imdbID}`,\n      imdbId: newFilm.imdbID,\n    };\n\n    setNewMovie(movie);\n    setQuery('');\n  };\n\n  const onCheckMovie = () => {\n    if (!newMovie || newMovie.Error !== undefined) {\n      setIsError(true);\n      setQuery('');\n\n      return;\n    }\n\n    addMovie(newMovie);\n\n    setNewMovie(null);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input',\n                { 'is-danger': isError })}\n              value={query}\n              onChange={onSearchField}\n            />\n          </div>\n\n          <p className={classNames('help',\n            { 'is-danger': isError },\n            { 'is-reveal': isError })}\n          >\n            Can&apos;t find a movie with such a title\n          </p>\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={toFindMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={onCheckMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {newMovie\n        && (\n          <div className=\"container\">\n            <h2 className=\"title\">Preview</h2>\n            <MovieCard {...newMovie} />\n          </div>\n        )\n      }\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (newMovie) => {\n    const duplicate = movies.find(movie => movie.imdbId === newMovie.imdbId);\n\n    if (!duplicate) {\n      setMovies([...movies, newMovie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}